//
//  DivertGonkulator.swift
//  T38
//
//  Created by Matthew Elmore on 4/27/19.
//  Copyright Â© 2019 elmo. All rights reserved.
//

import Foundation

public enum NearestConfig: String, CaseIterable {
    case bothEnginesPod     = "BEO_P"
    case bothEnginesNoPod   = "BEO_NP"
    case singleEngineNoPod  = "SEO_NP"
    case singleEnginePod    = "SEO_P"
}

public enum DiversionValue: Int, CaseIterable {
    //SA: Range, SA: Mach, SA: FF, CT: Range, CT: Alt, CT: Mach, CT: FF, D: Dist, D: FuelR]
    case stayAtRange        = 0
    case stayAtMach         = 1
    case stayAtFuelFlow     = 2
    case climbToRange       = 3
    case climbToAlt         = 4
    case climbToMach        = 5
    case climbToFuelFlow    = 6
    case descendDist        = 7
    case descendFuelRem     = 8
}


struct DivertGonkulator {
    
    private var diversionData = [
        "BEO_NP": [
            0.0: [600.0: [39.0, 0.54, 1325.0, 64.0, 20000.0, 0.68, 900.0, 32.0, 352.0],
                  800.0: [65.0, 0.54, 1325.0, 124.0, 35000.0, 0.81, 700.0, 59.0, 386.0],
                  1000.0: [90.0, 0.54, 1325.0, 196.0, 45000.0, 0.89, 650.0, 81.0, 407.0],
                  1400.0: [142.0, 0.54, 1325.0, 339.0, 45000.0, 0.89, 650.0, 81.0, 407.0]],
            5.0: [600.0: [46.0, 0.56, 1200.0, 74.0, 25000.0, 0.73, 825.0, 40.0, 363.0],
                  800.0: [76.0, 0.56, 1200.0, 139.0, 40000.0, 0.85, 675.0, 70.0, 397.0],
                  1000.0: [106.0, 0.56, 1200.0, 212.0, 45000.0, 0.89, 650.0, 81.0, 407.0],
                  1400.0: [166.0, 0.56, 1200.0, 352.0, 45000.0, 0.89, 650.0, 81.0, 407.0]],
            10.0: [600.0: [51.0, 0.59, 1050.0, 84.0, 30000.0, 0.77, 750.0, 49.0, 375.0],
                   800.0: [86.0, 0.59, 1050.0, 152.0, 40000.0, 0.85, 675.0, 70.0, 397.0],
                   1000.0: [121.0, 0.59, 1050.0, 226.0, 45000.0, 0.89, 650.0, 81.0, 407.0],
                   1400.0: [192.0, 0.59, 1050.0, 369.0, 45000.0, 0.89, 650.0, 81.0, 407.0]],
            20.0: [600.0: [60.0, 0.68, 900.0, 105.0, 35000.0, 0.81, 700.0, 59.0, 386.0],
                   800.0: [106.0, 0.68, 900.0, 179.0, 45000.0, 0.89, 650.0, 81.0, 407.0],
                   1000.0: [152.0, 0.68, 900.0, 252.0, 45000.0, 0.89, 650.0, 81.0, 407.0],
                   1400.0: [244.0, 0.68, 900.0, 395.0, 45000.0, 0.89, 650.0, 81.0, 407.0]],
            30.0: [600.0: [70.0, 0.77, 750.0, 128.0, 40000.0, 0.85, 675.0, 70.0, 397.0],
                   800.0: [130.0, 0.77, 750.0, 203.0, 45000.0, 0.89, 650.0, 81.0, 407.0],
                   1000.0: [189.0, 0.77, 750.0, 276.0, 45000.0, 0.89, 650.0, 81.0, 407.0],
                   1400.0: [306.0, 0.77, 750.0, 418.0, 45000.0, 0.89, 650.0, 81.0, 407.0]],
            40.0: [600.0: [76.0, 0.85, 675.0, 148.0, 45000.0, 0.89, 650.0, 81.0, 407.0],
                   800.0: [148.0, 0.85, 675.0, 222.0, 45000.0, 0.89, 650.0, 81.0, 407.0],
                   1000.0: [219.0, 0.85, 675.0, 295.0, 45000.0, 0.89, 650.0, 81.0, 407.0],
                   1400.0: [360.0, 0.85, 675.0, 437.0, 45000.0, 0.89, 650.0, 81.0, 407.0]]
        ],
        "BEO_P": [
            0.0: [600.0: [37.0, 0.5, 1350.0, 54.0, 15000.0, 0.63, 1025.0, 22.0, 337.0],
                  800.0: [61.0, 0.5, 1350.0, 108.0, 35000.0, 0.8, 750.0, 53.0, 373.0],
                  1000.0: [86.0, 0.5, 1350.0, 171.0, 40000.0, 0.85, 725.0, 62.0, 382.0],
                  1400.0: [134.0, 0.5, 1350.0, 304.0, 45000.0, 0.89, 725.0, 69.0, 390.0]],
            5.0: [600.0: [43.0, 0.54, 1225.0, 66.0, 20000.0, 0.67, 950.0, 30.0, 347.0],
                  800.0: [72.0, 0.54, 1225.0, 123.0, 35000.0, 0.8, 750.0, 53.0, 373.0],
                  1000.0: [100.0, 0.54, 1225.0, 188.0, 45000.0, 0.89, 725.0, 69.0, 390.0],
                  1400.0: [156.0, 0.54, 1225.0, 321.0, 45000.0, 0.89, 725.0, 69.0, 390.0]],
            10.0: [600.0: [48.0, 0.58, 1100.0, 74.0, 25000.0, 0.71, 825.0, 38.0, 356.0],
                   800.0: [81.0, 0.58, 1100.0, 137.0, 40000.0, 0.85, 725.0, 62.0, 382.0],
                   1000.0: [114.0, 0.58, 1100.0, 204.0, 45000.0, 0.89, 725.0, 69.0, 390.0],
                   1400.0: [180.0, 0.58, 1100.0, 337.0, 45000.0, 0.89, 725.0, 69.0, 390.0]],
            20.0: [600.0: [57.0, 0.67, 950.0, 98.0, 35000.0, 0.8, 750.0, 53.0, 373.0],
                   800.0: [101.0, 0.67, 950.0, 163.0, 40000.0, 0.85, 725.0, 62.0, 382.0],
                   1000.0: [144.0, 0.67, 950.0, 231.0, 45000.0, 0.89, 725.0, 69.0, 390.0],
                   1400.0: [230.0, 0.67, 950.0, 365.0, 45000.0, 0.89, 725.0, 69.0, 390.0]],
            30.0: [600.0: [68.0, 0.76, 800.0, 119.0, 40000.0, 0.85, 725.0, 62.0, 382.0],
                   800.0: [124.0, 0.76, 800.0, 187.0, 45000.0, 0.89, 725.0, 69.0, 390.0],
                   1000.0: [179.0, 0.76, 800.0, 255.0, 45000.0, 0.89, 725.0, 69.0, 390.0],
                   1400.0: [288.0, 0.76, 800.0, 392.0, 45000.0, 0.89, 725.0, 69.0, 390.0]],
            40.0: [600.0: [75.0, 0.85, 725.0, 138.0, 45000.0, 0.89, 725.0, 69.0, 390.0],
                   800.0: [141.0, 0.85, 725.0, 207.0, 45000.0, 0.89, 725.0, 69.0, 390.0],
                   1000.0: [207.0, 0.85, 725.0, 275.0, 45000.0, 0.89, 725.0, 69.0, 390.0],
                   1400.0: [336.0, 0.85, 725.0, 398.0, 45000.0, 0.89, 725.0, 69.0, 390.0]]
        ],
        "SEO_NP": [
            0.0: [600.0: [53.0, 0.44, 1650.0, 70.0, 15000.0, 0.54, 1350.0, 24.0, 320.0],
                  800.0: [87.0, 0.44, 1650.0, 123.0, 20000.0, 0.58, 1300.0, 32.0, 326.0],
                  1000.0: [122.0, 0.44, 1650.0, 178.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                  1400.0: [189.0, 0.44, 1650.0, 282.0, 25000.0, 0.62, 1275.0, 40.0, 332.0]],
            5.0: [600.0: [60.0, 0.47, 1550.0, 80.0, 20000.0, 0.58, 1300.0, 32.0, 326.0],
                  800.0: [99.0, 0.47, 1550.0, 134.0, 25000.0, 0.62, 1275.0, 40.0, 326.0],
                  1000.0: [138.0, 0.47, 1550.0, 190.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                  1400.0: [214.0, 0.47, 1550.0, 294.0, 25000.0, 0.62, 1275.0, 40.0, 332.0]],
            10.0: [600.0: [65.0, 0.5, 1400.0, 91.0, 20000.0, 0.58, 1300.0, 32.0, 326.0],
                   800.0: [110.0, 0.5, 1400.0, 146.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                   1000.0: [154.0, 0.5, 1400.0, 201.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                   1400.0: [239.0, 0.5, 1400.0, 305.0, 25000.0, 0.62, 1275.0, 40.0, 332.0]],
            20.0: [600.0: [76.0, 0.58, 1300.0, 110.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                   800.0: [131.0, 0.58, 1300.0, 166.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                   1000.0: [185.0, 0.58, 1300.0, 221.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                   1400.0: [288.0, 0.58, 1300.0, 325.0, 25000.0, 0.62, 1275.0, 40.0, 332.0]],
            30.0: [600.0: [99999.0, 99999.0, 99999.0, 124.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                   800.0: [99999.0, 99999.0, 99999.0, 180.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                   1000.0: [99999.0, 99999.0, 99999.0, 235.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                   1400.0: [99999.0, 99999.0, 99999.0, 339.0, 25000.0, 0.62, 1275.0, 40.0, 332.0]],
            40.0: [600.0: [99999.0, 99999.0, 99999.0, 142.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                   800.0: [99999.0, 99999.0, 99999.0, 198.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                   1000.0: [99999.0, 99999.0, 99999.0, 253.0, 25000.0, 0.62, 1275.0, 40.0, 332.0],
                   1400.0: [99999.0, 99999.0, 99999.0, 358.0, 25000.0, 0.62, 1275.0, 40.0, 332.0]]
        ],
        "SEO_P": [
            0.0: [600.0: [49.0, 0.41, 1650.0, 63.0, 15000.0, 0.53, 1450.0, 22.0, 319.0],
                  800.0: [81.0, 0.41, 1650.0, 111.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                  1000.0: [113.0, 0.41, 1650.0, 160.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                  1400.0: [176.0, 0.41, 1650.0, 253.0, 20000.0, 0.57, 1375.0, 30.0, 325.0]],
            5.0: [600.0: [55.0, 0.45, 1575.0, 72.0, 15000.0, 0.53, 1450.0, 22.0, 319.0],
                  800.0: [92.0, 0.45, 1575.0, 123.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                  1000.0: [128.0, 0.45, 1575.0, 171.0, 25000.0, 0.62, 1400.0, 30.0, 330.0],
                  1400.0: [198.0, 0.45, 1575.0, 264.0, 20000.0, 0.57, 1375.0, 30.0, 330.0]],
            10.0: [600.0: [61.0, 0.49, 1500.0, 84.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                   800.0: [102.0, 0.49, 1500.0, 133.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                   1000.0: [142.0, 0.49, 1500.0, 185.0, 25000.0, 0.62, 1400.0, 30.0, 330.0],
                   1400.0: [221.0, 0.49, 1500.0, 275.0, 20000.0, 0.57, 1375.0, 30.0, 325.0]],
            20.0: [600.0: [71.0, 0.57, 1375.0, 101.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                   800.0: [120.0, 0.57, 1375.0, 153.0, 25000.0, 0.62, 1400.0, 30.0, 330.0],
                   1000.0: [169.0, 0.57, 1375.0, 199.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                   1400.0: [262.0, 0.57, 1375.0, 292.0, 20000.0, 0.57, 1375.0, 30.0, 325.0]],
            
            30.0: [600.0: [99999.0, 99999.0, 99999.0, 112.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                   800.0: [99999.0, 99999.0, 99999.0, 162.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                   1000.0: [99999.0, 99999.0, 99999.0, 210.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                   1400.0: [99999.0, 99999.0, 99999.0, 303.0, 20000.0, 0.57, 1375.0, 30.0, 325.0]],
            
            40.0: [600.0: [99999.0, 99999.0, 99999.0, 127.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                   800.0: [99999.0, 99999.0, 99999.0, 177.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                   1000.0: [99999.0, 99999.0, 99999.0, 225.0, 20000.0, 0.57, 1375.0, 30.0, 325.0],
                   1400.0: [99999.0, 99999.0, 99999.0, 318.0, 20000.0, 0.57, 1375.0, 30.0, 325.0]]
        ]]
    
    private func lineSolver(knownX: Double, X1: Double, X2: Double, Y1: Double, Y2: Double) -> Double {
        let m = (Y2 - Y1)/(X2 - X1)
        let b = Y1 - (m * X1)
        return  (m * knownX + b)
    }
    
    private func fuelDimension(gas: Double, gasBounds: [Double], altDic: [Double: [Double]], columnIndex: Int) -> (value: Double, valid: Bool) {
        var valid = true
        var result = 0.0
        var X1 = 0.0
        var X2 = 0.0
        var Y1 = 0.0
        var Y2 = 0.0
        for g in gasBounds {
            if gas == g {
                let a = altDic[g]
                result = a![columnIndex]
                if result == 99999.0 { valid = false }
                break
            }
            if gas < gasBounds[0] {
                //TODO: Make this a throws function and this will be an error
                print("Gas is below charted Data")
                print("\(gas) in \(gasBounds.description)")
                break
            }
            if gas > gasBounds.last! {
                //TODO: Make this a throws function and this will be an error
                print("Gas is above charted Data")
                print("\(gas) in \(gasBounds)")
                break
            }
            if gas < g {
                let index = gasBounds.firstIndex(of: g)
                X1 = gasBounds[index! - 1]
                X2 = gasBounds[index!]
                Y1 = {
                    let a = altDic[X1]!
                    let b = a[columnIndex]
                    return b
                }()
                Y2 = {
                    let a = altDic[X2]!
                    let b = a[columnIndex]
                    return b
                }()
                result = lineSolver(knownX: gas, X1: X1, X2: X2, Y1: Y1, Y2: Y2)
                if Y2 == 99999.0 {
                    result = Y1
                    valid = false
                }
                break
            }
            
        }
        return (value: result, valid: valid)
    }
    
    
    public func nearestInterpolator(alt: Double, gas: Double, config: NearestConfig, diversionValue: DiversionValue) -> (value: Double, valid: Bool) {
        var valid = true
        let chartedData = diversionData
        let altBounds = [0.0, 5.0, 10.0, 20.0, 30.0, 40.0]
        let gasBounds = [600.0, 800.0, 1000.0, 1400.0]
        var altData = chartedData[config.rawValue]!
        var result = 0.0
        var X1 = 0.0
        var X2 = 0.0
        var Y1 = 0.0
        var Y2 = 0.0
        for a in altBounds {
            if alt == a {
                let i = altData[alt]!
                let r = fuelDimension(gas: gas, gasBounds: gasBounds, altDic: i, columnIndex: diversionValue.rawValue)
                result = r.value
                if result == 99999.0 { valid = false }
                if r.valid == false { valid = false }
            }
            if alt < altBounds[0] {
                //TODO: Make this a throws function and this will be an error
                print("Altitude is below charted Data")
                print("\(alt) in \(altBounds.description)")
                break
            }
            if alt > altBounds.last! {
                //TODO: Make this a throws function and this will be an error
                print("Altitude is above charted Data")
                print("\(alt) in \(altBounds)")
                break
            }
            if alt < a {
                let index = altBounds.firstIndex(of: a)
                X1 = altBounds[index! - 1]
                X2 = altBounds[index!]
                Y1 = {
                    return fuelDimension(gas: gas, gasBounds: gasBounds, altDic: altData[X1]!, columnIndex: diversionValue.rawValue).value
                }()
                Y2 = {
                    return fuelDimension(gas: gas, gasBounds: gasBounds, altDic: altData[X2]!, columnIndex: diversionValue.rawValue).value
                }()
                result = lineSolver(knownX: alt, X1: X1, X2: X2, Y1: Y1, Y2: Y2)
                if Y2 == 99999.0 {
                    result = Y1
                    valid = false
                }
                break
            }
        }
        return (value: result, valid: valid)
    }
}
